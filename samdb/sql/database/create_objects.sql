/** INICIO CONFIGURACAO USUARIO **/
-- Cria Tabela de Perfis
CREATE TABLE role (
  id INTEGER NOT NULL ,
  roleName varchar(45) DEFAULT NULL,
  PRIMARY KEY (id)
);
COMMIT;

-- Constraint
ALTER TABLE role 
ADD CONSTRAINT uk_role_UNIQUE1 UNIQUE (roleName);
COMMIT;

-- Popula tabela de perfis
INSERT INTO role VALUES (1,'ROOT');
INSERT INTO role VALUES (2,'ADMINISTRADOR');
INSERT INTO role VALUES (3,'CCO');
INSERT INTO role VALUES (4,'BASE');
INSERT INTO role VALUES (5,'OPERACAO');

-- Cria tabela de usuarios 
CREATE TABLE users (
  id INTEGER NOT NULL ,
  username varchar(45) DEFAULT NULL,
  password varchar(100) DEFAULT NULL,
  status varchar(45) DEFAULT NULL,
  PRIMARY KEY (id)
);
COMMIT;

-- Constraint
ALTER TABLE users 
ADD CONSTRAINT uk_users_UNIQUE1 UNIQUE (username);
COMMIT;

-- Popula tabela de usuarios (Criptografia MD5)
INSERT INTO users VALUES (1,'master','440e22afa3f863cb77844777f9f386e6','ACTIVE');

-- Cria tabela de relacionamentos
CREATE TABLE usersandroles (
  user_id INTEGER NOT NULL,
  role_id INTEGER NOT NULL,
  PRIMARY KEY (user_id,role_id)
);
COMMIT;

-- Popula tabela de relacionamentos
INSERT INTO usersandroles VALUES (1,1);


CREATE TABLE MENU (
  id INT NOT NULL,
  text VARCHAR(45) NOT NULL,
  iconCls VARCHAR(45),
  parent_id INT,
  className VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);
COMMIT;

-- Constraint
ALTER TABLE MENU 
ADD CONSTRAINT uk_MENU_UNIQUE1 UNIQUE (id,parent_id);
COMMIT;

CREATE TABLE PERMISSIONS (
  menu_id INT NOT NULL,
  role_id INT NOT NULL,
  PRIMARY KEY (menu_id, role_id)
);
COMMIT;

/*GENERATOR*/
CREATE GENERATOR GEN_MNU_ID;
SET GENERATOR GEN_MNU_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_MNU_ID  FOR MENU ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ID IS NULL)
        then new.ID = GEN_ID(GEN_MNU_ID,1);
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/

--MENU
INSERT INTO MENU (TEXT,PARENT_ID,CLASSNAME)VALUES('Inicio',NULL,'');
INSERT INTO MENU (TEXT,PARENT_ID,CLASSNAME)VALUES('Alarmes',(SELECT ID FROM MENU WHERE TEXT = 'Inicio'),'alarmgrid');

--PERMISSIONS
INSERT INTO PERMISSIONS SELECT ID ,1 FROM MENU;

/** FIM CONFIGURACAO USUARIO **/
/* Table:		EQUIPMENTS_MANUFACTURER
 * Prefix:		EMA
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_MANUFACTURER (
  EMA_ID INT NOT NULL PRIMARY KEY,
  EMA_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_EMA_INDEX1_idx ON EQUIPMENTS_MANUFACTURER(EMA_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_EMA_ID;
SET GENERATOR GEN_EMA_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMA_ID  FOR EQUIPMENTS_MANUFACTURER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EMA_ID IS NULL)
        then new.EMA_ID = GEN_ID(GEN_EMA_ID,1);
END^
SET TERM ; ^
COMMIT;



/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMA_LOG  FOR EQUIPMENTS_MANUFACTURER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_PROTOCOL
 * Prefix:		EPR
 * Date:		09/12/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_PROTOCOL (
  EPR_ID INT NOT NULL PRIMARY KEY,
  EPR_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_EPR_ID;
SET GENERATOR GEN_EPR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EPR_ID  FOR EQUIPMENTS_PROTOCOL ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EPR_ID IS NULL)
        then new.EPR_ID = GEN_ID(GEN_EPR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EPR_LOG  FOR EQUIPMENTS_PROTOCOL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO EQUIPMENTS_PROTOCOL(EPR_DESCRIPTION,USR_INSERT) VALUES ('WEBSERVICES SOAP 1.1','SYSTEM');
INSERT INTO EQUIPMENTS_PROTOCOL(EPR_DESCRIPTION,USR_INSERT) VALUES ('WEBSERVICES JSON','SYSTEM');
INSERT INTO EQUIPMENTS_PROTOCOL(EPR_DESCRIPTION,USR_INSERT) VALUES ('SNMPv1','SYSTEM');
INSERT INTO EQUIPMENTS_PROTOCOL(EPR_DESCRIPTION,USR_INSERT) VALUES ('SNMPv2c','SYSTEM');
INSERT INTO EQUIPMENTS_PROTOCOL(EPR_DESCRIPTION,USR_INSERT) VALUES ('SNMPv3','SYSTEM');

/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_MODEL
 * Prefix:		EMO
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_MODEL (
  EMO_ID INT NOT NULL PRIMARY KEY,
  EMO_DESCRIPTION VARCHAR(45) NOT NULL,
  EMO_PROTOCOL_ID INT NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;
  
/*INDEXES*/
CREATE INDEX ix_EMO_INDEX1_idx ON EQUIPMENTS_MODEL(EMO_DESCRIPTION);
CREATE INDEX fk_EMO_EPR_idx ON EQUIPMENTS_MODEL(EMO_PROTOCOL_ID);

/*REFERENCES*/
ALTER TABLE EQUIPMENTS_MODEL
ADD CONSTRAINT fk_EMO_EPR_ref
    FOREIGN KEY (EMO_PROTOCOL_ID)
    REFERENCES EQUIPMENTS_PROTOCOL (EPR_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_EMO_ID;
SET GENERATOR GEN_EMO_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMO_ID  FOR EQUIPMENTS_MODEL ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EMO_ID IS NULL)
        then new.EMO_ID = GEN_ID(GEN_EMO_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMO_LOG  FOR EQUIPMENTS_MODEL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/*
 * Variaveis:
 * OPERATIONAL_STATE:	Tabela
 * OST:	Prefixo da Tabela
 * <CAMPO_ID>:	Campo ID da Tabela
 * */

/* Table:		OPERATIONAL_STATE
 * Prefix:		OST
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE OPERATIONAL_STATE (
  OST_ID VARCHAR(20) NOT NULL,
  OST_MODEL_ID INT NOT NULL,
  OST_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '' ,
  PRIMARY KEY (OST_ID, OST_MODEL_ID));
COMMIT;

/*INDEXES*/
CREATE INDEX fk_OST_EMO_idx ON OPERATIONAL_STATE(OST_MODEL_ID);

/*REFERENCES*/
ALTER TABLE OPERATIONAL_STATE
ADD CONSTRAINT fk_OST_EMO_ref
    FOREIGN KEY (OST_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID);

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_OST_LOG  FOR OPERATIONAL_STATE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_TYPE
 * Prefix:		ETY
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_TYPE (
  ETY_ID INT NOT NULL PRIMARY KEY,
  ETY_DESCRIPTION VARCHAR(45) NOT NULL,
  ETY_DAILY_HOURS INT,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX ix_ETY_INDEX1_idx ON EQUIPMENTS_TYPE(ETY_DESCRIPTION);


/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_ETY_ID;
SET GENERATOR GEN_ETY_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_ETY_ID  FOR EQUIPMENTS_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ETY_ID IS NULL)
        then new.ETY_ID = GEN_ID(GEN_ETY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ETY_LOG  FOR EQUIPMENTS_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SITES_TYPE
 * Prefix:		STY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SITES_TYPE (
  STY_ID INT NOT NULL PRIMARY KEY,
  STY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_STY_INDEX1_idx ON SITES_TYPE (STY_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_STY_ID;
SET GENERATOR GEN_STY_ID TO 0;

/*CONSTRAINTS*/
ALTER TABLE SITES_TYPE 
ADD CONSTRAINT uk_STY_UNIQUE1 UNIQUE (STY_DESCRIPTION);
COMMIT;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_STY_ID  FOR SITES_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.STY_ID IS NULL)
        then new.STY_ID = GEN_ID(GEN_STY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_STY_LOG  FOR SITES_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SITES
 * Prefix:		SIT
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	SITES(SIT_ID),SITES_TYPE(STY_ID)
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SITES (
  SIT_ID			INT			NOT NULL	PRIMARY KEY
  ,SIT_DESCRIPTION	VARCHAR(45) NOT NULL
  ,SIT_SHORTNAME	VARCHAR(15) NOT NULL
  ,SIT_PARENT_ID	INT
  ,SIT_TYPE_ID		INT			NOT NULL
  ,USR_INSERT		VARCHAR(45)	NOT NULL
  ,DTI_INSERT		TIMESTAMP	NOT NULL
  ,USR_UPDATE		VARCHAR(45)
  ,DTI_UPDATE		TIMESTAMP
  ,DELETED			CHAR(1)		DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX fk_SIT_STY_idx ON SITES(SIT_TYPE_ID);
CREATE INDEX fk_SIT_SIT_idx ON SITES(SIT_PARENT_ID);
CREATE INDEX ix_SIT_INDEX1_idx ON SITES(SIT_DESCRIPTION);
  
/*REFERENCES*/
ALTER TABLE SITES
ADD CONSTRAINT fk_SIT_SIT_ref
    FOREIGN KEY (SIT_PARENT_ID)
    REFERENCES SITES (SIT_ID),
    
ADD CONSTRAINT fk_SIT_STY_ref
    FOREIGN KEY (SIT_TYPE_ID)
    REFERENCES SITES_TYPE (STY_ID);


/*GENERATOR*/
CREATE GENERATOR GEN_SIT_ID;
SET GENERATOR GEN_SIT_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SIT_ID  FOR SITES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SIT_ID IS NULL)
        then new.SIT_ID = GEN_ID(GEN_SIT_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SIT_LOG  FOR SITES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/******* END OF TABLE CONFIG *******/

/* Table:		COUNTER_TYPE
 * Prefix:		CTY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE COUNTER_TYPE (
  CTY_ID INT NOT NULL PRIMARY KEY,
  CTY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX ix_CTY_INDEX1_idx ON COUNTER_TYPE (CTY_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_CTY_ID;
SET GENERATOR GEN_CTY_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_CTY_ID  FOR COUNTER_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.CTY_ID IS NULL)
        then new.CTY_ID = GEN_ID(GEN_CTY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_CTY_LOG  FOR COUNTER_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SUB_SYSTEM
 * Prefix:		SSY
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE SUB_SYSTEM (
  SSY_ID VARCHAR(10) NOT NULL PRIMARY KEY,
  SSY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX ix_SSY_INDEX1_idx ON SUB_SYSTEM (SSY_DESCRIPTION);
  
  
/*REFERENCES*/

/*GENERATOR*/

/*TRIGGER ID*/


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SSY_LOG  FOR SUB_SYSTEM ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS
 * Prefix:		EQU
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS (
  EQU_ID				VARCHAR(20)	NOT NULL PRIMARY KEY
  ,EQU_FIXED_ASSET		VARCHAR(20)
  ,EQU_SERVICE_TAG		VARCHAR(20)
  ,EQU_IP				VARCHAR(15)
  ,EQU_TYPE_ID			INT			NOT NULL
  ,EQU_MODEL_ID			INT			NOT NULL
  ,EQU_MANUFACTURER_ID	INT			NOT NULL
  ,EQU_SITE_ID			INT			NOT NULL
  ,EQU_COUNTER_TYPE_ID	INT			NOT NULL
  ,EQU_SYSTEM_ID		VARCHAR(10) NOT NULL
  ,EQU_SOLV_TYPE		CHAR(1)		NOT NULL
  ,EQU_WARRANTY			INT			DEFAULT 0
  ,EQU_COUNTER_QT		INT			DEFAULT 0
  ,EQU_OID				VARCHAR(45)
  ,EQU_MTBF_PREV		INT			DEFAULT 0
  ,EQU_MTBF_CALC		INT			DEFAULT 0
  ,EQU_MTBF_MANF		INT			DEFAULT 0
  ,EQU_INSTALL_DATE		TIMESTAMP	NOT NULL
  ,EQU_MANUFACTURE_DATE	TIMESTAMP	NOT NULL
  ,EQU_ACQUIRED_DATE	TIMESTAMP	NOT NULL
  ,EQU_REMARK			VARCHAR(60)
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45)
  ,DTI_UPDATE			TIMESTAMP
  ,DELETED				CHAR(1)		DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_EQU_EMO_idx		ON EQUIPMENTS(EQU_MODEL_ID);
CREATE INDEX fk_EQU_ETY_idx		ON EQUIPMENTS(EQU_TYPE_ID);
CREATE INDEX fk_EQU_EMA_idx		ON EQUIPMENTS(EQU_MANUFACTURER_ID);
CREATE INDEX fk_EQU_SIT_idx		ON EQUIPMENTS(EQU_SITE_ID);
CREATE INDEX fk_EQU_CTY_idx		ON EQUIPMENTS(EQU_COUNTER_TYPE_ID);
CREATE INDEX fk_EQU_SSY_idx		ON EQUIPMENTS(EQU_SYSTEM_ID);
CREATE INDEX ix_EQU_INDEX1_idx	ON EQUIPMENTS(EQU_FIXED_ASSET);
CREATE INDEX ix_EQU_INDEX2_idx	ON EQUIPMENTS(EQU_SERVICE_TAG);
  
/*REFERENCES*/
ALTER TABLE EQUIPMENTS
ADD CONSTRAINT fk_EQU_EMA_ref
    FOREIGN KEY (EQU_MANUFACTURER_ID)
    REFERENCES EQUIPMENTS_MANUFACTURER (EMA_ID),
ADD CONSTRAINT fk_EQU_EMO_ref
    FOREIGN KEY (EQU_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID),
ADD CONSTRAINT fk_EQU_ETY_ref
    FOREIGN KEY (EQU_TYPE_ID)
    REFERENCES EQUIPMENTS_TYPE (ETY_ID),
ADD CONSTRAINT fk_EQU_SIT_ref
    FOREIGN KEY (EQU_SITE_ID)
    REFERENCES SITES (SIT_ID),
ADD CONSTRAINT fk_EQU_CTY_ref
    FOREIGN KEY (EQU_COUNTER_TYPE_ID)
    REFERENCES COUNTER_TYPE (CTY_ID),
ADD CONSTRAINT fk_EQU_SSY_ref
    FOREIGN KEY (EQU_SYSTEM_ID)
    REFERENCES SUB_SYSTEM (SSY_ID);

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EQU_LOG  FOR EQUIPMENTS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SEVERITY_LEVEL
 * Prefix:		SLE
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SEVERITY_LEVEL (
  SLE_ID			VARCHAR(2)	NOT NULL PRIMARY KEY,
  SLE_DESCRIPTION	VARCHAR(45) NOT NULL,
  SLE_DISPLAY_COLOR VARCHAR(7)	NOT NULL,
  SLE_TIME_SERVICE	INT			NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP,
  DELETED			CHAR(1)		DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SLE_INDEX1_idx ON SEVERITY_LEVEL(SLE_DESCRIPTION);


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SLE_LOG  FOR SEVERITY_LEVEL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,SLE_DISPLAY_COLOR,SLE_TIME_SERVICE,USR_INSERT)VALUES('0','-'		,'#000000',60,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,SLE_DISPLAY_COLOR,SLE_TIME_SERVICE,USR_INSERT)VALUES('1','NORMAL'	,'#000000',60,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,SLE_DISPLAY_COLOR,SLE_TIME_SERVICE,USR_INSERT)VALUES('2','LEVE'	,'#000000',60,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,SLE_DISPLAY_COLOR,SLE_TIME_SERVICE,USR_INSERT)VALUES('3','GRAVE'	,'#000000',60,'SYSTEM');
/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS_GROUP
 * Prefix:		AGR
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_GROUP (
  AGR_ID INT NOT NULL PRIMARY KEY,
  AGR_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX ix_AGR_INDEX1_idx ON ALARMS_GROUP(AGR_DESCRIPTION);
  
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_AGR_ID;
SET GENERATOR GEN_AGR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_AGR_ID  FOR ALARMS_GROUP ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.AGR_ID IS NULL)
        then new.AGR_ID = GEN_ID(GEN_AGR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_AGR_LOG  FOR ALARMS_GROUP ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS_TYPE
 * Prefix:		ATY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_TYPE (
  ATY_ID INT NOT NULL PRIMARY KEY,
  ATY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_ATY_INDEX1_idx ON ALARMS_TYPE(ATY_DESCRIPTION);
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_ATY_ID;
SET GENERATOR GEN_ATY_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_ATY_ID  FOR ALARMS_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ATY_ID IS NULL)
        then new.ATY_ID = GEN_ID(GEN_ATY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ATY_LOG  FOR ALARMS_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS
 * Prefix:		ALM
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE ALARMS (
  ALM_ID			VARCHAR(20) NOT NULL PRIMARY KEY
  ,ALM_DESCRIPTION	VARCHAR(45) NOT NULL
  ,ALM_PARENT_ID	VARCHAR(20) 
  ,ALM_GROUP_ID		INT			NOT NULL
  ,ALM_TYPE_ID		INT			NOT NULL
  ,ALM_MODEL_ID		INT			NOT NULL
  ,ALM_SEVERITY_ID	VARCHAR(2)	NOT NULL
  ,ALM_COUNTER_INC	INT			NOT NULL
  ,USR_INSERT		VARCHAR(45) NOT NULL
  ,DTI_INSERT		TIMESTAMP	NOT NULL
  ,USR_UPDATE		VARCHAR(45) 
  ,DTI_UPDATE		TIMESTAMP 
  ,DELETED			CHAR(1)		DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_ALM_AGR_idx ON ALARMS(ALM_GROUP_ID);
CREATE INDEX fk_ALM_ATY_idx ON ALARMS(ALM_TYPE_ID);
CREATE INDEX ix_ALM_INDEX1_idx ON ALARMS(ALM_DESCRIPTION);
CREATE INDEX fk_ALM_EMO_idx ON ALARMS(ALM_MODEL_ID);
CREATE INDEX fk_ALM_ALM_idx ON ALARMS(ALM_PARENT_ID);
CREATE INDEX fk_ALM_SLE_idx ON ALARMS(ALM_SEVERITY_ID);

/*REFERENCES*/
ALTER TABLE ALARMS
ADD CONSTRAINT fk_ALM_AGR_ref
    FOREIGN KEY (ALM_GROUP_ID)
    REFERENCES ALARMS_GROUP (AGR_ID),
    
ADD CONSTRAINT fk_ALM_ATY_ref
    FOREIGN KEY (ALM_TYPE_ID)
    REFERENCES ALARMS_TYPE (ATY_ID),
    
ADD CONSTRAINT fk_ALM_EMO_ref
    FOREIGN KEY (ALM_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID),
    
ADD CONSTRAINT fk_ALM_ALM_ref
    FOREIGN KEY (ALM_PARENT_ID)
    REFERENCES ALARMS (ALM_ID),
    
ADD CONSTRAINT fk_ALM_SLE_ref
    FOREIGN KEY (ALM_SEVERITY_ID)
    REFERENCES SEVERITY_LEVEL (SLE_ID);

  
/*GENERATOR*/

/*TRIGGER ID*/

    
/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ALM_LOG  FOR ALARMS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS_FILTER
 * Prefix:		AFI
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_FILTER (
  AFI_ID			INT NOT NULL PRIMARY KEY,
  AFI_ALARM_ID		VARCHAR(20) NOT NULL,
  AFI_EQUIPMENT_ID	VARCHAR(20) NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP NOT NULL,
  USR_UPDATE		VARCHAR(45) ,
  DTI_UPDATE		TIMESTAMP ,
  DELETED			CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_AFI_ALM_idx ON ALARMS_FILTER(AFI_ALARM_ID);
CREATE INDEX fk_AFI_EQU_idx ON ALARMS_FILTER(AFI_EQUIPMENT_ID);

/*REFERENCES*/
ALTER TABLE ALARMS_FILTER
ADD CONSTRAINT fk_AFI_ALM_ref
    FOREIGN KEY (AFI_ALARM_ID)
    REFERENCES ALARMS (ALM_ID),

ADD CONSTRAINT fk_AFI_EQU_ref
    FOREIGN KEY (AFI_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);
  
/*GENERATOR*/
CREATE GENERATOR GEN_AFI_ID;
SET GENERATOR GEN_AFI_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_AFI_ID  FOR ALARMS_FILTER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.AFI_ID IS NULL)
        then new.AFI_ID = GEN_ID(GEN_AFI_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_AFI_LOG  FOR ALARMS_FILTER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EVENTS
 * Prefix:		EVE
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:		
 * */

/*TABLE*/
CREATE TABLE EVENTS (
  EVE_ID				BIGINT		NOT NULL PRIMARY KEY,
  EVE_EQUIPMENT_ID		VARCHAR(20),
  EVE_ALARM_ID			VARCHAR(20),
  EVE_OPER_STATE_ID		VARCHAR(20),
  EVE_DATETIME			TIMESTAMP,
  EVE_SOLV_USER			VARCHAR(45),
  EVE_SOLV_DATE			TIMESTAMP,
  EVE_RECO_USER			VARCHAR(45),
  EVE_RECO_DATE			TIMESTAMP,
  EVE_SITE				VARCHAR(45),
  EVE_MODEL				VARCHAR(45),
  USR_INSERT			VARCHAR(45) NOT NULL,
  DTI_INSERT			TIMESTAMP	NOT NULL,
  USR_UPDATE			VARCHAR(45),
  DTI_UPDATE			TIMESTAMP,
  DELETED				CHAR(1)		DEFAULT '');
COMMIT;



/*INDEXES*/
CREATE INDEX ix_EVE_INDEX1_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID, EVE_DATETIME);
CREATE INDEX ix_EVE_INDEX2_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID, EVE_ALARM_ID);
CREATE INDEX ix_EVE_INDEX3_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID);
  
  
/*REFERENCES*/


/*GENERATOR*/
CREATE GENERATOR GEN_EVE_ID;
SET GENERATOR GEN_EVE_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EVE_ID  FOR EVENTS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EVE_ID IS NULL)
        then new.EVE_ID = GEN_ID(GEN_EVE_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EVE_LOG  FOR EVENTS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_TYPE
 * Prefix:		SOT
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_TYPE (
  SOT_ID INT NOT NULL PRIMARY KEY,
  SOT_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOT_INDEX1_idx ON SERVICE_ORDER_TYPE(SOT_DESCRIPTION);  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_SOT_ID;
SET GENERATOR GEN_SOT_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOT_ID  FOR SERVICE_ORDER_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOT_ID IS NULL)
        then new.SOT_ID = GEN_ID(GEN_SOT_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOT_LOG  FOR SERVICE_ORDER_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('CORRETIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('PREDITIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('PREVENTIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('SUBSTIUIÇÃO','SYSTEM');

/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_STATUS
 * Prefix:		SOS
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_STATUS (
  SOS_ID INT NOT NULL PRIMARY KEY,
  SOS_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOS_INDEX1_idx ON SERVICE_ORDER_STATUS(SOS_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_SOS_ID;
SET GENERATOR GEN_SOS_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOS_ID  FOR SERVICE_ORDER_STATUS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOS_ID IS NULL)
        then new.SOS_ID = GEN_ID(GEN_SOS_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOS_LOG  FOR SERVICE_ORDER_STATUS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('NOVA','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('ATRIBUIDA','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('EM ANALISE','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('REATRIBUIR','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('REJEITADO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('AGUARDANDO AUTORIZACAO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('ACESSO LIBERADO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('EM ANDAMENTO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('EM ESPERA','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('CONCLUIDO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('FINALIZADO','SYSTEM');
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT) VALUES ('REABERTO','SYSTEM');

/******* END OF TABLE CONFIG *******/

/* Table:		TECHNICIAN
 * Prefix:		TEC
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE TECHNICIAN (
  TEC_ID VARCHAR(6) NOT NULL PRIMARY KEY,
  TEC_NAME VARCHAR(45) NOT NULL,
  TEC_SITE_ID INT NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_TEC_SIT_idx ON TECHNICIAN(TEC_SITE_ID);
CREATE INDEX ix_TEC_INDEX1_idx ON TECHNICIAN(TEC_NAME);
  
/*REFERENCES*/
ALTER TABLE TECHNICIAN
ADD CONSTRAINT fk_TEC_SIT_ref
    FOREIGN KEY (TEC_SITE_ID)
    REFERENCES SITES (SIT_ID);

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_TEC_LOG  FOR TECHNICIAN ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER
 * Prefix:		SOR
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	SERVICE_ORDER_TYPE (SOT_ID),SERVICE_ORDER_STATUS (SOS_ID)
 * 				EVENTS (EVE_ID),SERVICE_ORDER (SOR_ID),EQUIPMENTS (EQU_ID)
 * Obs:			
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER (
   SOR_ID				INT			NOT NULL PRIMARY KEY
  ,SOR_TYPE_ID			INT			NOT NULL
  ,SOR_STATUS_ID		INT			NOT NULL
  ,SOR_EVENT_ID			BIGINT
  ,SOR_PARENT_ID		INT
  ,SOR_TECHNICIAN_ID	VARCHAR(6)
  ,SOR_START_FORECAST	TIMESTAMP	NOT NULL
  ,SOR_START			TIMESTAMP 
  ,SOR_END_FORECAST		TIMESTAMP	NOT NULL
  ,SOR_END				TIMESTAMP 
  ,SOR_PRIORITY_ID		VARCHAR(2)	NOT NULL
  ,SOR_REMARKS			CHAR(255)
  ,SOR_EQUIPMENT_ID		VARCHAR(20) NOT NULL
  ,SOR_EQUIPMENT_STOP	VARCHAR(1)	NOT NULL
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45) 
  ,DTI_UPDATE			TIMESTAMP 
  ,DELETED				CHAR(1)		DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOR_SOT_idx ON SERVICE_ORDER(SOR_TYPE_ID);
CREATE INDEX fk_SOR_SOS_idx ON SERVICE_ORDER(SOR_STATUS_ID);
CREATE INDEX fk_SOR_EVE_idx ON SERVICE_ORDER(SOR_EVENT_ID);
CREATE INDEX fk_SOR_SOR_idx ON SERVICE_ORDER(SOR_PARENT_ID);
CREATE INDEX fk_SOR_EQU_idx ON SERVICE_ORDER(SOR_EQUIPMENT_ID);
CREATE INDEX fk_SOR_SLE_idx ON SERVICE_ORDER(SOR_PRIORITY_ID);
CREATE INDEX fk_SOR_TEC_idx ON SERVICE_ORDER(SOR_TECHNICIAN_ID);


/*REFERENCES*/
ALTER TABLE SERVICE_ORDER
ADD CONSTRAINT fk_SOR_SOT_ref
    FOREIGN KEY (SOR_TYPE_ID)
    REFERENCES SERVICE_ORDER_TYPE (SOT_ID),

ADD CONSTRAINT fk_SOR_SOS_ref
    FOREIGN KEY (SOR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SOR_EVE_ref
    FOREIGN KEY (SOR_EVENT_ID)
    REFERENCES EVENTS (EVE_ID),

ADD CONSTRAINT fk_SOR_SOR_ref
    FOREIGN KEY (SOR_PARENT_ID)
    REFERENCES SERVICE_ORDER (SOR_ID),

ADD CONSTRAINT fk_SOR_EQU_ref
    FOREIGN KEY (SOR_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID),

ADD CONSTRAINT fk_SOR_SLE_ref
    FOREIGN KEY (SOR_PRIORITY_ID)
    REFERENCES SEVERITY_LEVEL (SLE_ID),

ADD CONSTRAINT fk_SOR_TEC_ref
    FOREIGN KEY (SOR_TECHNICIAN_ID)
    REFERENCES TECHNICIAN (TEC_ID);
    
/*GENERATOR*/
CREATE GENERATOR GEN_SOR_ID;
SET GENERATOR GEN_SOR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOR_ID  FOR SERVICE_ORDER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOR_ID IS NULL)
        then new.SOR_ID = GEN_ID(GEN_SOR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOR_LOG  FOR SERVICE_ORDER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_JOBS
 * Prefix:		SOJ
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_JOBS (
  SOJ_ID VARCHAR(2) NOT NULL PRIMARY KEY,
  SOJ_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP,
  DELETED CHAR(1) DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOJ_INDEX1_idx ON SERVICE_ORDER_JOBS(SOJ_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOJ_LOG  FOR SERVICE_ORDER_JOBS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_LOG
 * Prefix:		SOL
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_LOG (
  SOL_ID			INT			NOT NULL PRIMARY KEY,
  SOL_SERVICE_ORDER_ID INT		NOT NULL,
  SOL_PRE_STATUS_ID INT,
  SOL_CUR_STATUS_ID INT			NOT NULL,
  SOL_USER_ID		VARCHAR(45) NOT NULL,
  SOL_DATETIME		TIMESTAMP	NOT NULL,
  SOL_REMARKS		CHAR(255),
  USR_INSERT		VARCHAR(45)	NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP,
  DELETED			CHAR(1)		DEFAULT '');
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOL_SOR_idx ON SERVICE_ORDER_LOG(SOL_SERVICE_ORDER_ID);
CREATE INDEX fk_SOL_SOS_A_idx ON SERVICE_ORDER_LOG(SOL_PRE_STATUS_ID);
CREATE INDEX fk_SOL_SOS_B_idx ON SERVICE_ORDER_LOG(SOL_CUR_STATUS_ID);
  
/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_LOG
ADD CONSTRAINT fk_SOL_SOR_ref
    FOREIGN KEY (SOL_SERVICE_ORDER_ID)
    REFERENCES SERVICE_ORDER (SOR_ID),
    
ADD CONSTRAINT fk_SOL_SOS_A_ref
    FOREIGN KEY (SOL_PRE_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SOL_SOS_B_ref
    FOREIGN KEY (SOL_CUR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_SOL_ID;
SET GENERATOR GEN_SOL_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOL_ID  FOR SERVICE_ORDER_LOG ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOL_ID IS NULL)
        then new.SOL_ID = GEN_ID(GEN_SOL_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOL_LOG  FOR SERVICE_ORDER_LOG ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/*
 * Variaveis:
 * STATUS_RULES:	Tabela
 * SRU:	Prefixo da Tabela
 * SRU_ID:	Campo ID da Tabela
 * */

/* Table:		STATUS_RULES
 * Prefix:		SRU
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE STATUS_RULES (
  SRU_ID			INT			NOT NULL PRIMARY KEY,
  SRU_ROLE_ID		INT			NOT NULL,
  SRU_CUR_STATUS_ID INT			NOT NULL,
  SRU_NXT_STATUS_ID INT			NOT NULL,
  SRU_LOG_REMARK	CHAR(1)		NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP,
  DELETED			CHAR(1)		DEFAULT '');
COMMIT;
  

/*INDEXES*/
CREATE INDEX fk_SRU_ROLE_idx ON STATUS_RULES(SRU_ROLE_ID);
CREATE INDEX fk_SRU_SOS_A_idx ON STATUS_RULES(SRU_CUR_STATUS_ID);
CREATE INDEX fk_SRU_SOS_B_idx ON STATUS_RULES(SRU_NXT_STATUS_ID);

/*REFERENCES*/
ALTER TABLE STATUS_RULES
ADD CONSTRAINT fk_SRU_ROLE_ref
    FOREIGN KEY (SRU_ROLE_ID)
    REFERENCES ROLE (id),

ADD CONSTRAINT fk_SRU_SOS_A_ref
    FOREIGN KEY (SRU_CUR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SRU_SOS_B_ref
    FOREIGN KEY (SRU_NXT_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID);
  
  
/*GENERATOR*/
CREATE GENERATOR GEN_SRU_ID;
SET GENERATOR GEN_SRU_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SRU_ID  FOR STATUS_RULES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SRU_ID IS NULL)
        then new.SRU_ID = GEN_ID(GEN_SRU_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SRU_LOG  FOR STATUS_RULES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
-- STATUS: 1
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,'SYSTEM');
	
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,'SYSTEM');

-- STATUS: 2
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

-- STATUS: 3
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

-- STATUS: 4
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,'SYSTEM');
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,'SYSTEM');
	
-- STATUS: 5
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,'SYSTEM');
	
-- STATUS: 5.1
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM');

-- STATUS: 6
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM');

-- STATUS: 7
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'AGUARDANDO AUTORIZACAO')
	,'SYSTEM');

-- STATUS: 8
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'AGUARDANDO AUTORIZACAO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ACESSO LIBERADO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'AGUARDANDO AUTORIZACAO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ACESSO LIBERADO')
	,'SYSTEM');

-- STATUS: 9
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ACESSO LIBERADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,'SYSTEM');

-- STATUS: 10
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,'SYSTEM');

-- STATUS: 11
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM');

-- STATUS: 12
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'OPERACAO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,'SYSTEM');

-- STATUS: 13
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM');
	
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM');
	
-- STATUS: 14
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM');

-- STATUS: 15
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM');

-- STATUS: 16
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'CCO')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM');

INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_LOG_REMARK,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
VALUES
	((SELECT ID FROM ROLE WHERE ROLENAME = 'BASE')
	,'S'
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM');


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_OCCURRENCES
 * Prefix:		SOO
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_OCCURRENCES (
  SOO_ID				INT			NOT NULL
  ,SOO_SERVICE_ORDER_ID	INT			NOT NULL
  ,SOO_SERVICE_ID		VARCHAR(2)	NOT NULL
  ,SOO_TECHNICIAN_ID	VARCHAR(6)	NOT NULL
  ,SOO_EVENT_TYPE		INT			NOT NULL
  ,SOO_START			TIMESTAMP	NOT NULL
  ,SOO_END				TIMESTAMP	NOT NULL
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45) 
  ,DTI_UPDATE			TIMESTAMP 
  ,DELETED				CHAR(1)		DEFAULT ''
  ,PRIMARY KEY (SOO_ID, SOO_SERVICE_ORDER_ID));
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOO_TEC_idx ON SERVICE_ORDER_OCCURRENCES(SOO_TECHNICIAN_ID);
CREATE INDEX fk_SOO_SOJ_idx ON SERVICE_ORDER_OCCURRENCES(SOO_SERVICE_ID);
CREATE INDEX fk_SOO_SOR_idx ON SERVICE_ORDER_OCCURRENCES(SOO_SERVICE_ORDER_ID);

  
/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_OCCURRENCES
ADD CONSTRAINT fk_SOO_SOJ_ref
    FOREIGN KEY (SOO_SERVICE_ID)
    REFERENCES SERVICE_ORDER_JOBS (SOJ_ID),

ADD CONSTRAINT fk_SOO_TEC_ref
    FOREIGN KEY (SOO_TECHNICIAN_ID)
    REFERENCES TECHNICIAN (TEC_ID),

ADD CONSTRAINT fk_SOO_SOR_ref
    FOREIGN KEY (SOO_SERVICE_ORDER_ID)
    REFERENCES SERVICE_ORDER (SOR_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_SOO_ID;
SET GENERATOR GEN_SOO_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOO_ID  FOR SERVICE_ORDER_OCCURRENCES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOO_ID IS NULL)
        then new.SOO_ID = GEN_ID(GEN_SOO_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOO_LOG  FOR SERVICE_ORDER_OCCURRENCES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		PARAMETERS
 * Prefix:		PAR
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE PARAMETERS (
  PAR_ID		INT			NOT NULL PRIMARY KEY
  ,PAR_NAME		VARCHAR(45) NOT NULL
  ,PAR_TYPE		VARCHAR(45) NOT NULL
  ,PAR_VALUE	VARCHAR(45) NOT NULL
  ,PAR_DESC		VARCHAR(45) NOT NULL
  ,USR_INSERT	VARCHAR(45) NOT NULL
  ,DTI_INSERT	TIMESTAMP   NOT NULL
  ,USR_UPDATE	VARCHAR(45)
  ,DTI_UPDATE	TIMESTAMP
  ,DELETED		CHAR(1) DEFAULT '');
COMMIT;


/*INDEXES*/
CREATE INDEX ix_PAR_INDEX1_idx ON PARAMETERS(PAR_NAME,PAR_TYPE,PAR_DESC);
CREATE INDEX ix_PAR_INDEX2_idx ON PARAMETERS(PAR_NAME,PAR_TYPE,PAR_VALUE);  


/*GENERATOR*/
CREATE GENERATOR GEN_PAR_ID;
SET GENERATOR GEN_PAR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_PAR_ID  FOR PARAMETERS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.PAR_ID IS NULL)
        then new.PAR_ID = GEN_ID(GEN_PAR_ID,1);
END^
SET TERM ; ^
COMMIT;



/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_PAR_LOG  FOR PARAMETERS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('IPSERVER_SNMP','C','10.114.0.150','IP DO SERVIDOR SNMP DO SAM','SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('PORTSERVER_SNMP','C','8888','PORTA DO SERVIDOR SNMP DO SAM','SYSTEM');
COMMIT;

/******* END OF TABLE CONFIG *******/

